{
  "Program": [["Declaration-list", "$"]],
  "Declaration-list": [["Declaration", "Declaration-list"], ["EPSILON"]],
  "Declaration": [["Declaration-initial", "Declaration-prime"]],
  "Declaration-initial": [["Type-specifier", "#push", "ID"]],
  "Declaration-prime": [["Fun-declaration-prime"], ["Var-declaration-prime"]],
  "Var-declaration-prime": [
    ["#declare_int", ";"],
    ["[", "#push_num", "NUM", "]", "#declare_arr", ";"]
  ],
  "Fun-declaration-prime": [
    [
      "#begin_func",
      "(",
      "Params",
      ")",
      "#end_args",
      "Compound-stmt",
      "#end_func"
    ]
  ],
  "Type-specifier": [
    ["#push", "int"],
    ["#push", "void"]
  ],
  "Params": [
    ["#push", "int", "#push", "ID", "Param-prime", "Param-list"],
    ["#push", "void"]
  ],
  "Param-list": [[",", "Param", "Param-list"], ["EPSILON"]],
  "Param": [["Declaration-initial", "Param-prime"]],
  "Param-prime": [["[", "]", "#arr_arg"], ["#narr_arg"]],
  "Compound-stmt": [["{", "Declaration-list", "Statement-list", "}"]],
  "Statement-list": [["Statement", "Statement-list"], ["EPSILON"]],
  "Statement": [
    ["Expression-stmt"],
    ["Compound-stmt"],
    ["Selection-stmt"],
    ["Iteration-stmt"],
    ["Return-stmt"]
  ],
  "Expression-stmt": [
    ["Expression", ";", "#end_expression"],
    ["break", "#break_loop", ";"],
    [";"]
  ],
  "Selection-stmt": [
    [
      "if",
      "(",
      "Expression",
      ")",
      "#save_skip",
      "Statement",
      "#jpfsave",
      "else",
      "Statement",
      "#jp"
    ]
  ],
  "Iteration-stmt": [
    [
      "repeat",
      "#begin_repeat",
      "Statement",
      "until",
      "(",
      "Expression",
      ")",
      "#end_repeat"
    ]
  ],
  "Return-stmt": [["return", "Return-stmt-prime"]],
  "Return-stmt-prime": [[";"], ["Expression", "#set_return_addr", ";"]],
  "Expression": [["Simple-expression-zegond"], ["#pid", "ID", "B"]],
  "B": [
    ["#assign_chain", "=", "Expression", "#assign"],
    ["[", "Expression", "]", "#parray", "H"],
    ["Simple-expression-prime"]
  ],
  "H": [
    ["#assign_chain", "=", "Expression", "#assign"],
    ["G", "D", "C"]
  ],
  "Simple-expression-zegond": [["Additive-expression-zegond", "C"]],
  "Simple-expression-prime": [["Additive-expression-prime", "C"]],
  "C": [["#save_relop", "Relop", "Additive-expression", "#do_op"], ["EPSILON"]],
  "Relop": [["<"], ["=="]],
  "Additive-expression": [["Term", "D"]],
  "Additive-expression-prime": [["Term-prime", "D"]],
  "Additive-expression-zegond": [["Term-zegond", "D"]],
  "D": [["#save_addop", "Addop", "Term", "#do_op", "D"], ["EPSILON"]],
  "Addop": [["+"], ["-"]],
  "Term": [["Factor", "G"]],
  "Term-prime": [["Factor-prime", "G"]],
  "Term-zegond": [["Factor-zegond", "G"]],
  "G": [["#save_multop", "*", "Factor", "#do_op", "G"], ["EPSILON"]],
  "Factor": [
    ["(", "Expression", ")"],
    ["#pid", "ID", "Var-call-prime"],
    ["#push_num", "NUM"]
  ],
  "Var-call-prime": [
    ["#get_func", "(", "Args", ")", "#invoke_func"],
    ["Var-prime"]
  ],
  "Var-prime": [["[", "Expression", "]", "#parray"], ["EPSILON"]],
  "Factor-prime": [
    ["#get_func", "(", "Args", ")", "#invoke_func"],
    ["EPSILON"]
  ],
  "Factor-zegond": [
    ["(", "Expression", ")"],
    ["#push_num", "NUM"]
  ],
  "Args": [["Arg-list"], ["EPSILON"]],
  "Arg-list": [["Expression", "Arg-list-prime"]],
  "Arg-list-prime": [[",", "Expression", "Arg-list-prime"], ["EPSILON"]]
}
